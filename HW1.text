goodw171@csel-kh4240-02:~$ script HW1.text
Script started, file is HW1.text
goodw171@csel-kh4240-02:~$ clojure
Clojure 1.4.0
(defn maxmul7 [low high]
(def rng (range low (+ high 1)))

(defn mul7 [n]
(if (= (mod n 7) 0) true false))

(def sevens (filter mul7 rng))
(last sevens))
#'user/maxmul7
user=> (maxmul7 1 20)
14
user=> (maxmul7 20 35)
35
user=> (maxmul7 1 6)
nil
user=> (maxmul7 7 10)
7
(defn sumcube [a b]

(defn cube [n]
(* n (* n n)))

(loop [x a sum 0]
  (if (= x (+ b 1)) sum 
    (recur (inc x) (+ sum (cube x)) )
)))
#'user/sumcube
user=> (sumcube 1 3)
36
(defn drop2nd [n]
(def fir (list (first n)))
(def rem_one (next n))
(def tail (next rem_one))
(concat fir tail)
)
#'user/drop2nd
user=> (drop2nd [1 2 3 4])
(1 3 4)
user=> (drop2nd '(1 2 3 4))
(1 3 4)
(defn perfect [n]
(loop [x 1 sum 0]

(if (< x n) (if (= (mod n x) 0) (recur (+ x 1) (+ sum x)) (recur (+ x 1) sum) )

(if (= sum n) true false)
)))
#'user/perfect
user=> (perfect 6)
true
user=> (perfect 10)
false
(defn ave [a]
(def total (reduce + a))
(/ total (count a) )
)
#'user/ave
user=> (ave [1 2 3 4])
5/2
(defn stddev [n]

(defn square [n]
(* n n))

(defn ave [a]
(def total (reduce + a))
(/ total (count a) )
)

(loop [x 0 sum 0]
(if (= x (count n) ) (Math/sqrt (/ sum (- (count n) 1) ))
(recur (+ 1 x) (+ sum (square (- (get n x) (ave n)))))
)))
#'user/stddev
user=> (stddev [1 2 3 4])
1.2909944487358058
(defn posel [a b]
(loop [x 0]
 (if (= x (count a)) nil
    (if (= (get a x) b) x (recur (+ 1 x))
))))
#'user/posel
user=> (posel [10 20 30 40] 30)
2
user=> 
[1]+  Stopped                 clojure
goodw171@csel-kh4240-02:~$ exit
There are stopped jobs.
goodw171@csel-kh4240-02:~$ 









FUNCTIONS ONLY








"1"

(defn maxmul7 [low high]
(def rng (range low (+ high 1)))

(defn mul7 [n]
(if (= (mod n 7) 0) true false))

(def sevens (filter mul7 rng))
(last sevens))

"2"

(defn sumcube [a b]

(defn cube [n]
(* n (* n n)))

(loop [x a sum 0]
  (if (= x (+ b 1)) sum 
    (recur (inc x) (+ sum (cube x)) )
)))

"3"

(defn drop2nd [n]
(def fir (list (first n)))
(def rem_one (next n))
(def tail (next rem_one))
(concat fir tail)
)

"4"

(defn perfect [n]
(loop [x 1 sum 0]

(if (< x n) (if (= (mod n x) 0) (recur (+ x 1) (+ sum x)) (recur (+ x 1) sum) )

(if (= sum n) true false)
)))

"5"

(defn ave [a]
(def total (reduce + a))
(/ total (count a) )
)

(defn stddev [n]

(defn square [n]
(* n n))

(defn ave [a]
(def total (reduce + a))
(/ total (count a) )
)

(loop [x 0 sum 0]
(if (= x (count n) ) (Math/sqrt (/ sum (- (count n) 1) ))
(recur (+ 1 x) (+ sum (square (- (get n x) (ave n)))))
)))

"6"

(defn posel [a b]
(loop [x 0]
 (if (= x (count a)) nil
    (if (= (get a x) b) x (recur (+ 1 x))
))))


